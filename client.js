// Generated by CoffeeScript 1.9.3
(function() {
  var SugarClient,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  SugarClient = (function() {
    SugarClient.host = null;

    SugarClient.Primus = null;

    function SugarClient(userId, authToken) {
      this.userId = userId;
      this.authToken = authToken;
      this.createEvent = bind(this.createEvent, this);
      this.__subscribeTo = bind(this.__subscribeTo, this);
      this.__subscribeToChannels = bind(this.__subscribeToChannels, this);
      this.emit = bind(this.emit, this);
      this.off = bind(this.off, this);
      this.on = bind(this.on, this);
      this.unsubscribeFrom = bind(this.unsubscribeFrom, this);
      this.subscribeTo = bind(this.subscribeTo, this);
      this.receiveData = bind(this.receiveData, this);
      this.disconnect = bind(this.disconnect, this);
      this.connect = bind(this.connect, this);
      this.primusUrl = bind(this.primusUrl, this);
      this.events = {};
      this.subscriptions = {};
      this.initializePrimus();
    }

    SugarClient.prototype.initializePrimus = function() {
      if (SugarClient.Primus == null) {
        throw 'SugarClient.Primus is not defined';
      }
      if (SugarClient.host == null) {
        throw 'SugarClient.host is not defined';
      }
      this.primus = SugarClient.Primus.connect(SugarClient.host, {
        websockets: true,
        network: true,
        manual: true,
        ping: 10000
      });
      this.primus.on('outgoing::url', this.primusUrl);
      return this.primus.on('data', this.receiveData);
    };

    SugarClient.prototype.host = function() {
      return SugarClient.host;
    };

    SugarClient.prototype.primusUrl = function(baseUrl) {
      if (this.userId && this.authToken) {
        return baseUrl.query = "user_id=" + this.userId + "&auth_token=" + this.authToken;
      }
    };

    SugarClient.prototype.connect = function() {
      this.disconnect();
      return this.primus.open();
    };

    SugarClient.prototype.disconnect = function() {
      var _, i, key, len, userKeys;
      userKeys = (function() {
        var ref, results;
        ref = this.subscriptions;
        results = [];
        for (key in ref) {
          _ = ref[key];
          if (key.match(/^(session|user):/i)) {
            results.push(key);
          }
        }
        return results;
      }).call(this);
      for (i = 0, len = userKeys.length; i < len; i++) {
        key = userKeys[i];
        delete this.subscriptions[key];
      }
      this.userKey = this.loggedIn = null;
      return this.primus.end();
    };

    SugarClient.prototype.receiveData = function(data) {
      if (data.type === 'connection') {
        if (typeof console !== "undefined" && console !== null) {
          if (typeof console.info === "function") {
            console.info('[CONNECTED] ', data);
          }
        }
        this.loggedIn = data.loggedIn;
        this.userKey = data.userKey;
        this.subscriptions[this.userKey] = true;
        return setTimeout(this.__subscribeToChannels, 100);
      } else {
        return this.emit(data);
      }
    };

    SugarClient.prototype.subscribeTo = function(channel) {
      if (this.subscriptions[channel]) {
        return false;
      }
      this.subscriptions[channel] = true;
      return this.__subscribeTo(channel);
    };

    SugarClient.prototype.unsubscribeFrom = function(channel) {
      if (!this.subscriptions[channel]) {
        return;
      }
      delete this.subscriptions[channel];
      return this.primus.write({
        action: 'Unsubscribe',
        params: {
          channel: channel
        }
      });
    };

    SugarClient.prototype.on = function(type, callback) {
      var base;
      (base = this.events)[type] || (base[type] = []);
      return this.events[type].push(callback);
    };

    SugarClient.prototype.off = function(type, callback) {
      if (callback && this.events[type]) {
        return this.events[type] = this.events[type].filter(function(cb) {
          return cb !== callback;
        });
      } else {
        return delete this.events[type];
      }
    };

    SugarClient.prototype.emit = function(data) {
      var callback, callbacks, i, len, results;
      callbacks = this.events[data.type] || [];
      results = [];
      for (i = 0, len = callbacks.length; i < len; i++) {
        callback = callbacks[i];
        results.push(callback(data));
      }
      return results;
    };

    SugarClient.prototype.__subscribeToChannels = function() {
      var _, channel, ref, results;
      ref = this.subscriptions;
      results = [];
      for (channel in ref) {
        _ = ref[channel];
        results.push(this.__subscribeTo(channel));
      }
      return results;
    };

    SugarClient.prototype.__subscribeTo = function(channel) {
      return this.primus.write({
        action: 'Subscribe',
        params: {
          channel: channel
        }
      });
    };

    SugarClient.prototype.createEvent = function(type, channel, data) {
      return this.primus.write({
        action: 'Event',
        params: {
          type: type,
          channel: channel,
          data: data
        }
      });
    };

    return SugarClient;

  })();

  if (typeof module !== "undefined" && module !== null) {
    module.exports = SugarClient;
  }

}).call(this);
